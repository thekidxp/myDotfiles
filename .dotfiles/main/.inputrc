# To the extent possible under law, the author(s) have dedicated all 
# copyright and related and neighboring rights to this software to the 
# public domain worldwide. This software is distributed without any warranty. 
# You should have received a copy of the CC0 Public Domain Dedication along 
# with this software. 
# If not, see <http://creativecommons.org/publicdomain/zero/1.0/>. 

# ~/.inputrc: readline initialization file.

# The copy in your home directory (~/.inputrc) is yours, please
# feel free to customise it to create a shell
# environment to your liking.  If you feel a change
# would be benifitial to all, please feel free to send
# a patch to the msys2 mailing list.

# the following line is actually
# equivalent to "\C-?": delete-char
# "\e[3~": delete-char

# VT
# "\e[1~": beginning-of-line
# "\e[4~": end-of-line

# kvt
# "\e[H": beginning-of-line
# "\e[F": end-of-line

# rxvt and konsole (i.e. the KDE-app...)
# "\e[7~": beginning-of-line
# "\e[8~": end-of-line

# VT220
# "\eOH": beginning-of-line
# "\eOF": end-of-line

# Allow 8-bit input/output
 set meta-flag on
 set convert-meta off
 set input-meta on
 set output-meta on
#$if Bash
  # Don't ring bell on completion
  #set bell-style none

  # or, don't beep at me - show me
  set bell-style visible

  # Show all instead of beeping first
  #set show-all-if-ambiguous off

  # Filename completion/expansion
  set completion-ignore-case on
  set show-all-if-ambiguous off
  set menu-complete-display-prefix on

  # If there are more than 100 possible completions for a word, ask to show them all
  set completion-query-items 100

  # Be more intelligent when autocompleting by also looking at the text after
  # the cursor. For example, when the current line is "cd ~/src/mozil", and
  # the cursor is on the "z", pressing Tab will not autocomplete it to "cd
  # ~/src/mozillail", but to "cd ~/src/mozilla". (This is supported by the
  # Readline used by Bash 4.)
  set skip-completed-text on

  # Flip through autocompletion matches with Shift-Tab
  "\e[Z": menu-complete

  # Expand homedir name
  #set expand-tilde on

  # Append "/" to all dirnames
  set mark-directories on
  set mark-symlinked-directories on

  # visible-stats
  # Append a mark according to the file type in a listing
  set visible-stats on

  # Match all files
  #set match-hidden-files on

  # 'Magic Space'
  # Insert a space character then performs
  # a history expansion in the line
  #Space: magic-space

  # edit the path
  # "\C-xp": "PATH=${PATH}\e\C-e\C-a\ef\C-f"

  # prepare to type a quoted word --
  # insert open and close double quotes
  # and move to just after the open quote
  "\C-x\"": "\"\"\C-b"

  # insert a backslash (testing backslash escapes
  # in sequences and macros)
  # "\C-x\\": "\\"

  # Quote the current or previous word
  # "\C-xq": "\eb\"\ef\""

  # Add a binding to refresh the line, which is unbound
  # "\C-xr": redraw-current-line

  # Edit variable on current line.
  # "\M-\C-v": "\C-a\C-k$\C-y\M-\C-e\C-a\C-y="


    "\e[7~": beginning-of-line      # Home Key
    "\e[8~": end-of-line            # End Key
    "\e[11~": display-shell-version # F1
    "\e[15~": re-read-init-file     # F5
    "\e[12~": "Function Key 2"
    "\e[13~": "Function Key 3"
    "\e[14~": "Function Key 4"
    "\e[17~": "Function Key 6"
    "\e[18~": "Function Key 7"
    "\e[19~": "Function Key 8"
    "\e[20~": "Function Key 9"
#$endif

# #MSYSTEM is emacs based
$if mode=emacs
  # Common to Console & RXVT
  "\C-?": backward-kill-line         # Ctrl-BackSpace
  "\e[2~": paste-from-clipboard      # "Ins. Key"
  "\e[5~": beginning-of-history      # Page up
  "\e[6~": end-of-history            # Page down

  $if term=msys # RXVT
    "\e[7~": beginning-of-line      # Home Key
    "\e[8~": end-of-line            # End Key
    "\e[11~": display-shell-version # F1
    "\e[15~": re-read-init-file     # F5
    "\e[12~": "Function Key 2"
    "\e[13~": "Function Key 3"
    "\e[14~": "Function Key 4"
    "\e[17~": "Function Key 6"
    "\e[18~": "Function Key 7"
    "\e[19~": "Function Key 8"
    "\e[20~": "Function Key 9"
    "\e[21~": "Function Key 10"

  $else
  # Eh, normal Console is not really cygwin anymore, is it? Using 'else' instead. -mstormo
  # $if term=cygwin # Console
    "\e[1~": beginning-of-line      # Home Key
    "\e[4~": end-of-line            # End Key
    "\e[3~": delete-char      # Delete Key
    "\e\e[C": forward-word      # Alt-Right
    "\e\e[D": backward-word      # Alt-Left
    "\e[1;5C": forward-word   # ctrl + right
    "\e[1;5D": backward-word  # ctrl + left 
    "\e[17~": "Function Key 6"
    "\e[18~": "Function Key 7"
    "\e[19~": "Function Key 8"
    "\e[20~": "Function Key 9"
    "\e[21~": "Function Key 10"
    "\e[23~": "Function Key 11"
    "\e[A": history-search-backward
    "\e[B": history-search-forward
  $endif
$endif
